
class Solution{
    
    public static Node reverse(Node head){
        if(head == null || head.next == null){
            return head;
        }
        
        Node curr = head;
        Node prev = null;
        
        while(curr!=null){
            Node forward = curr.next;
            curr.next = prev;
            prev = curr;
            curr = forward;
        }
        return prev;
    }
    
    //Function to add two numbers represented by linked list.
    static Node addTwoLists(Node first, Node second){
        // code here
        // return head of sum list
        
        first = reverse(first);
        second = reverse(second);
        Node head = new Node(100);
        Node temp = head;
        
        int carry = 0;
        
        while(first != null || second != null || carry == 1){
            int sum = 0;
            if (first != null){
                sum = sum+ first.data;
                first = first.next;
            }
            if(second != null){
                sum = sum + second.data;
                second = second.next;
            }
            
            sum = sum + carry;
            carry = sum /10;
            Node node = new Node (sum % 10);
            temp.next = node;
            temp = temp.next;
        }
        head = reverse(head.next);
        return head;
    }
}
